<tool id="measureGastruloids" name="measureGastruloids" version="0.0.1">
    <description> Use macro from Pierre Osteil to measure gastruloids.</description>
    <requirements>
        <requirement type="package" version="20170530">fiji</requirement>
    </requirements>
    <stdio>
        <regex match="\[ERROR\]" source="stdout" level="fatal"/>
        <exit_code range="1:" level="fatal"/>
    </stdio>
    <command>
        <![CDATA[
        #import re

        mkdir input &&
        mkdir output &&
        #for file in $input_format.input
            #set identifier = re.sub('[^\s\w\-]', '_', str($file.element_identifier))
            ln -s '$file' input/${identifier}.${input_format.file_type} &&
        #end for
        ImageJ --ij2 --headless --console -macro  '$__tool_directory__/'Area_measure_for_OMERO.ijm "`pwd`/input/,output/,.${input_format.file_type},$maxThreshold" > output.log
        ]]>
    </command>
    <inputs>
        <conditional name="input_format">
            <param name="file_type" type="select" label="Input format" >
                <option value="tiff" selected="true" >TIFF</option>
                <option value="png" >PNG</option>
                <option value="jpeg" >JPEG</option>
            </param>
            <when value="tiff">
                <param name="input" multiple="true"  type="data" format="tiff" label="Select Images to analyse."/>
            </when>
            <when value="png">
                <param name="input" multiple="true"  type="data" format="png" label="Select Images to analyse."/>
            </when>
            <when value="jpeg">
                <param name="input" multiple="true"  type="data" format="jpg" label="Select Images to analyse."/>
            </when>
        </conditional>
        <param name="maxThreshold" type="integer" value="140" label="Maximum value for threshold."/>
    </inputs>

    <outputs>
        <data name="logfile" format="txt" from_work_dir="output.log" label="${tool.name} on ${on_string}: logfile">
        </data>
        <collection name="Results" type="list" label="${tool.name} on ${on_string}: Results">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.csv" directory="output" format="csv"/>
        </collection>
        <collection name="ROI" type="list" label="${tool.name} on ${on_string}: ROI">
            <discover_datasets pattern="(?P&lt;designation&gt;.+)\.txt" directory="output" format="tabular"/>
        </collection>
    </outputs>
    <help>
    <![CDATA[
**Overview**

This tool will make 16bits image and use threshold and analyseParticle to measure Gastruloids.

**Script**

This is a ImageJ macro::

    // This macro was written thanks to
    // https://code.adonline.id.au/imagej-batch-process-headless/
    // and
    // https://visikol.com/2019/02/building-an-imagej-macro-for-batch-processing-of-images-from-imaging-well-plates/
    // The analysis part of the macro is from Pierre Osteil

    // Specify global variables

    parameter_string = getArgument();
    print(parameter_string);
    arglist = split(parameter_string, ",");

    inputDirectory = arglist[0];
    suffix = arglist[1];
    maxThreshold = arglist[2];

    setBatchMode(true); 

    close("\\Others");
    close("Summary");

    print("Will process the folder")

    processFolder(inputDirectory);

    print("Finished processed the folder");

    setBatchMode(false); // Now disable BatchMode since we are finished

    // Scan folders/subfolders/files to locate files with the correct suffix

    function processFolder(input) {
        list = getFileList(input);
        print(list.length);
        for (i = 0; i < list.length; i++) {
            print(list[i]);
            if(File.isDirectory(input + "/" + list[i])){
                processFolder("" + input + "/" + list[i]);          
            }
            if(endsWith(list[i], suffix)){
                processImage("" + input + "/" + list[i]);          
            }
        }
    }


    function processImage(imageFile)
    {
        print(imageFile);
        run("Clear Results");
        print("nRes:" + nResults);
        open(imageFile);
        // Get the filename from the title of the image that's open for adding to the results table
        // We do this instead of using the imageFile parameter so that the
        // directory path is not included on the table
        filename = getTitle();
        
        print(filename);
        
        // Perform the analysis
        run("16-bit");
        setThreshold(0, maxThreshold);
        run("Convert to Mask");
        run("Dilate");
        run("Fill Holes");

        //Get the measurements
        run("Set Measurements...", "area feret's perimeter shape display redirect=None decimal=3");
        run("Set Scale...", "distance=1 known=0.92 unit=micron"); //objective 4x 2.27 on TC microscope for x10 use 0.92 (measured by PierreO)
        // run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude add"); // add clear to have one Result file per image
        run("Analyze Particles...", "size=10000-400000 circularity=0.05-1.00 display clear exclude show=Overlay"); // add clear to have one Result file per image

        // Save the results data
        saveAs("results", inputDirectory + "/" + filename + "__Results.csv");
        // Now loop through Overlay:
        for (i=0; i<Overlay.size; i++) {
        Overlay.activateSelection(i);
        getSelectionCoordinates(x,y);
        f = File.open(filename + "__" + i + "_roi_coordinates.txt");
        for (j=0; j<x.length; j++){
            print(f, x[j] + "\t" + y[j]);        
        }
        File.close(f);
        }
        print("Selection OK");
        print("nRes:" + nResults);
        
        close();  // Closes the current image
        print("OK");
    }
]]>
    </help>
</tool>

